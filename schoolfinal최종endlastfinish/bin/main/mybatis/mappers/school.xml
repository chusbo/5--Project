<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.sc.dao.SchoolDAO">
	<resultMap id="Result" type="SchoolVO">
		<result property="attendance_no" column="attendance_no" />
		<result property="st_no" column="st_no" />
		<result property="attendance_date" column="attendance_date" />
		<result property="attendance_status" column="attendance_status" />
		<result property="board_no" column="board_no" />
		<result property="title" column="title" />
		<result property="article" column="article" />
		<result property="cre_date" column="cre_date" />
		<result property="grade_no" column="grade_no" />
		<result property="sub_no" column="sub_no" />
		<result property="semester" column="semester" />
		<result property="score" column="score" />
		<result property="st_name" column="st_name" />
		<result property="st_birth" column="st_birth" />
		<result property="st_gender" column="st_gender" />
		<result property="st_addr" column="st_addr" />
		<result property="st_phone" column="st_phone" />
		<result property="st_parent_phone" column="st_parent_phone" />
		<result property="st_grade" column="st_grade" />
		<result property="tc_no" column="tc_no" />
		<result property="st_status" column="st_status" />
		<result property="sub_name" column="sub_name" />
		<result property="tc_name" column="tc_name" />
		<result property="tc_birth" column="tc_birth" />
		<result property="tc_gender" column="tc_gender" />
		<result property="tc_addr" column="tc_addr" />
		<result property="tc_phone" column="tc_phone" />
		<result property="tc_hired" column="tc_hired" />
		<result property="user_id" column="user_id" />
		<result property="user_pwd" column="user_pwd" />
		<result property="user_grant" column="user_grant" />
		<result property="tc_status" column="tc_status" />
	</resultMap>
	
	<!-- 로그인 -->
	<select id="loginById" parameterType="SchoolVO" resultType="SchoolVO">
        select * from user
        where user_id=#{user_id} and user_pwd=#{user_pwd}
    </select>
	
	<!-- 메인페이지 -->
	<select id="selectAllmain" resultMap="Result">
        SELECT * FROM board ORDER BY board_no DESC
    </select>
    
    <!-- 메인페이지용 공지사항-->
    <select id="selectAllmainBoList" resultMap="Result">
        SELECT * FROM board ORDER BY board_no DESC
    </select>
    
    <!-- 공지사항 -->
    <select id="selectAllboard" resultMap="Result">
        SELECT * FROM board ORDER BY board_no DESC
    </select>
    
    <!-- 관리자 공지사항 -->
    <select id="selectAlladminBoard" resultMap="Result">
        SELECT * FROM board ORDER BY board_no DESC
    </select>
    
    <!-- 공지사항 정보 -->
    <select id="selectAllboardDetail" resultMap="Result">
        SELECT * FROM board WHERE board_no = #{boardNo}
    </select>
    
    <!-- 관리자 공지사항 정보 -->
    <select id="selectAlladminBoardDetail" resultMap="Result">
        SELECT * FROM board WHERE board_no = #{boardNo}
    </select>
    
     <!-- 공지사항 추가 -->
    <insert id="insertBoard" parameterType="SchoolVO">
        INSERT INTO board ( title, article) 
        VALUES (#{title}, #{article})
    </insert>
    
    <!-- 공지사항 삭제 -->
    <delete id="deleteBoard" parameterType="int">
        DELETE FROM board WHERE board_no = #{aid}
    </delete>
    
    <!-- 공지사항 수정-->
    <update id="updateBoard" parameterType="SchoolVO">
        UPDATE board
        SET title = #{title}, article = #{article}
        WHERE board_no = #{board_no}
    </update>

<!--   ug    -->
    
    <!-- 모든 과목과 해당 교사의 이름을 선택하는 쿼리 -->
	<select id="selectAllSubs" resultMap="Result">
		select subject.sub_no, subject.sub_name, teacher.tc_name
		from subject
		left join teacher on subject.sub_no = teacher.sub_no
	</select>

	<!-- 주어진 과목 번호 목록에 해당하는 과목과 교사의 이름을 선택하는 쿼리 -->
	<select id="selectSubsByNos" parameterType="list" resultMap="Result"> select
		subject.sub_no, subject.sub_name, teacher.tc_name from subject left join
		teacher on subject.sub_no = teacher.sub_no where subject.sub_no in <foreach
			item="item" index="index" collection="list" open="(" separator=","
			close=")">
			#{item}
		</foreach>
	</select>

	<!-- 모든 과목의 번호와 이름을 선택하는 쿼리 -->
	<select id="selectAllSubNames" resultMap="Result">
		select sub_no, sub_name
		from subject
	</select>

	<!-- 새로운 과목을 추가하는 쿼리 -->
	<insert id="insertSub" parameterType="com.project.sc.vo.SchoolVO">
		insert into subject (sub_no, sub_name)
		values (#{sub_no}, #{sub_name})
	</insert>

	<!-- 주어진 과목 번호에 해당하는 과목을 삭제하는 쿼리 -->
	<delete id="deleteSub" parameterType="String">
		delete from subject
		where sub_no = #{sub_no}
	</delete>

	<!-- 주어진 사용자 ID에 해당하는 사용자의 모든 정보를 선택하는 쿼리 -->
	<select id="selectUserById" parameterType="String" resultMap="Result">
		select *
		from teacher
		where user_id = #{user_id}
	</select>

	<!-- 주어진 사용자 ID에 해당하는 사용자의 전화번호와 주소를 업데이트하는 쿼리 -->
	<update id="updateUser" parameterType="com.project.sc.vo.SchoolVO">
		update teacher
		set tc_phone = #{tc_phone}, tc_addr = #{tc_addr}
		where user_id = #{user_id}
	</update>

	<!-- 모든 학년과 과목별 평균 점수를 선택하는 쿼리 -->
    <select id="selectGradeAverages" resultType="map">
        select student.st_grade as grade, subject.sub_name as subject,
        avg(grade.score) as avg_score
        from grade
        join student on grade.st_no = student.st_no
        join subject on grade.sub_no = subject.sub_no
        group by student.st_grade, subject.sub_name
        order by student.st_grade, subject.sub_name
    </select>

    <!-- 주어진 학기에 해당하는 학년과 과목별 평균 점수를 선택하는 쿼리 -->
    <select id="getAvgScoresBySem" resultType="map">
        select student.st_grade as grade, subject.sub_name as subject,
        avg(grade.score) as avg_score
        from grade
        join student on grade.st_no = student.st_no
        join subject on grade.sub_no = subject.sub_no
        where grade.semester = #{semester}
        group by student.st_grade, subject.sub_name
        order by student.st_grade, subject.sub_name
    </select>

    <!-- 학생들의 학년별 등수와 평균 점수를 선택하는 쿼리 -->
    <select id="getRanks" resultType="map">
        select student.st_grade as grade, student.st_name as name,
        avg(grade.score) as avg_score,
        rank() over (partition by student.st_grade order by avg(grade.score) desc) as rank_value
        from grade
        join student on grade.st_no = student.st_no
        group by student.st_grade, student.st_name
        order by student.st_grade, rank_value
    </select>
   
<!--             sb  -->

	<!-- 학생정보 리스트 -->
	<select id="StudentList" resultMap="Result">
		select *
		from student
		order by st_no desc
	</select>

    <!-- 학생 번호로 학생 정보 가져오기 -->
    <select id="InfoStudent" resultMap="Result">
        select * from
        student join teacher
        on student.tc_no=teacher.tc_no
        where st_no = #{stNo}
    </select>

    
    <!-- 학생 신규 등록하기 -->
   	<insert id="InsertStudent" parameterType="schoolVO">
		insert into 
		student(st_no, st_name, st_birth, st_gender, st_addr, st_phone, st_parent_phone, st_grade, tc_no)
		values(#{st_no}, #{st_name}, #{st_birth}, #{st_gender},	#{st_addr},	#{st_phone}, #{st_parent_phone}, #{st_grade}, #{tc_no})
	</insert>
	
	
    <!-- 학생 번호로 학생 정보 수정하기 -->	
	<update id="UpdateStudent" parameterType="schoolVO">
    	update student
    	set st_name=#{st_name}, st_birth=#{st_birth}, st_gender=#{st_gender}, st_addr=#{st_addr}, st_phone=#{st_phone}, st_parent_phone=#{st_parent_phone}, st_grade=#{st_grade}, tc_no=#{tc_no}
    	where st_no=#{st_no}
	</update>
	
    <!-- 학생 번호로 학생 정보 삭제하기 -->	
	<delete id="DeleteStudent" parameterType="String">
		delete 
		from student
		where st_no=#{stNo}
	</delete>
	
	<!-- 학생 성적 정보 조회하기 -->
	<select id="StudentGrade" resultMap="Result">
		select *
		from student 
		join grade on student.st_no=grade.st_no
		join subject on grade.sub_no=subject.sub_no
		where student.st_no=#{stNo}
		order by grade.semester;
	</select>
	
	<!-- 학생 출석 조회하기 -->
	<select id="selectAttendance" parameterType="map"
		resultType="com.project.sc.vo.SchoolVO">
		select *
		from attendance
		where st_no = #{st_no}
		and attendance_date between #{startDate} and #{endDate}
	</select>
	
	

<!-- ds           -->
    
    <!-- 교사 신규 등록하기 -->
   	<insert id="InsertTeacher" parameterType="schoolVO">
		insert into 
		teacher(tc_no, tc_name, tc_birth, tc_gender, tc_addr, tc_phone, tc_hired, sub_no, user_id, tc_status)
		values(#{tc_no}, #{tc_name}, #{tc_birth}, #{tc_gender},	#{tc_addr},	#{tc_phone}, #{tc_hired}, #{sub_no}, #{user_id}, #{tc_status})
	</insert>
	
	<!-- 교사 삭제하기 -->
	<delete id="DeleteTeacher" parameterType="String">
    	DELETE FROM teacher WHERE tc_no = #{tcNo}
	</delete>
	
	<!-- 전체 출석 업데이트 -->
	<update id="attendanceUpdate" parameterType="map">
		UPDATE attendance
		SET attendance_status = '출석'
		WHERE attendance_date = #{endDate}
		AND st_no IN (SELECT st_no FROM student WHERE tc_no = #{tcNo});
	</update>


	<!-- 전체 출석 조회 -->
	<select id="AttendanceAll" parameterType="map" resultMap="Result">
		SELECT a.attendance_no, a.st_no, a.attendance_date, a.attendance_status,
		s.st_name, s.st_grade, t.tc_name
		FROM attendance a
		JOIN student s ON a.st_no = s.st_no
		JOIN teacher t ON s.tc_no = t.tc_no
		WHERE t.tc_no = #{tcNo}
		AND a.attendance_date = #{attendanceDate}
	</select>


	<!-- 출석 상태 개별 업데이트 -->
	<update id="updateAttendance" parameterType="map">
		UPDATE attendance
		SET attendance_status = #{newStatus}
		WHERE attendance_no = #{attendanceNo}
	</update>
	
	<!--교사 목록 조회 -->
	<select id="TeacherList" resultMap="Result">
		select * from teacher 
		join subject 
		on teacher.sub_no= subject.sub_no;
	</select>

	<!-- 교사 번호로 교사 상세 정보 조회 -->
	<select id="getTeacherByNo" resultMap="Result">
		select *
		from teacher
		join subject
		on teacher.sub_no = subject.sub_no 
		where tc_no = #{tcNo}
	</select>
	
	<!--관리자용 교사 목록 조회 -->
	<select id="adminTeacherList" resultMap="Result">
		select * from teacher 
		join subject 
		on teacher.sub_no= subject.sub_no;
	</select>

	<!-- 관리자용 교사 번호로 교사 상세 정보 조회 -->
	<select id="getAdminTeacherByNo" resultMap="Result">
		select *
		from teacher
		join subject
		on teacher.sub_no = subject.sub_no 
		where tc_no = #{tcNo}
	</select>

	<!-- 교사 번호로 담당 학생번호, 학생명 조회(담임학급 학생 조회) -->
	<select id="findByTcNo" resultMap="Result">
		select student.st_no, student.st_name
		from student
		join teacher
		on student.tc_no = teacher.tc_no
		where student.tc_no = #{tcNo}
	</select>

	<!--교사 번호로 교사 번호, 교사명 조회(담임학급 학생 조회 - 담임교사님 불러오기) -->
	<select id="findTcNameByTcNo" resultMap="Result">
		select tc_no, tc_name
		from teacher
		where tc_no = #{tcNo}
	</select>

	<!-- 교사 번호로 담당 과목 및 성적 조회 -->
	<select id="subjectGrades" resultMap="Result">
		select st_name, sub_name, semester, score
		from grade
		join subject on grade.sub_no = subject.sub_no
		join teacher on subject.sub_no = teacher.sub_no
		join student on grade.st_no = student.st_no
		where teacher.tc_no = #{tcNo}
		order by semester 
	</select>

	<!-- 담당 과목 성적 입력 -->
	<insert id="insertSubjectGradesProcess" parameterType="schoolVO">
		insert into grade(st_no, sub_no, semester, score)
		values(#{st_no}, #{sub_no}, #{semester}, #{score})
	</insert>

	<!-- 성적 수정 -->
	<update id="updateScore" parameterType="map">
		UPDATE grade
		SET score = #{newScore}
		WHERE grade_no = #{gradeNo}
	</update>

</mapper>
